@model Goliath.Models.ProfileSettingsModel
@using Goliath.Models.Accounts
@using Newtonsoft.Json
@{
    var user = await _repository.GetUserFromContextAsync(User);
    List<LoginTracebackEntryModel> history = JsonConvert.DeserializeObject<List<LoginTracebackEntryModel>>(user.AccountLoginHistory);
}

<p id="option-text">
    LOGIN TRACEBACK
    <i class="fas fa-question-circle item-info hvr-grow"
       tabindex="0" role="button" data-toggle="popover"
       data-trigger="focus"
       title="Login Traceback" data-html="true"
       data-content="Goliath keeps track of the last 10 times your account was accessed. All times stored are stored using UTC. You can convert them to your timezone.">
    </i>
</p>
<p class="text-muted font-italic">Goliath keeps track of the last 10 logins on your account.</p>
<p><a asp-action="@nameof(UserPanelController.ClearLoginTraceback)">Clear All</a></p>
<table class="table table-hover table-striped">
    <thead class="thead-dark">
        <tr>
            <th>#</th>
            <th>Time (UTC)</th>
            <th>Time from Now (UTC)</th>
            <th>IP Address</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < history?.Count; i++)
        {
            string message = string.Empty;
            TimeSpan t = DateTime.UtcNow.Subtract(DateTime.Parse(history[i].Timestamp));
            if (t.Days > 0)
            {
                message = $"{t.Days} day(s) ago.";
            }
            else if (t.Hours > 0)
            {
                message = $"{t.Hours} hour(s) ago.";
            }
            else if (t.Minutes > 0)
            {
                message = $"{t.Minutes} minute(s) ago.";
            }
            else if (t.Seconds > 0)
            {
                message = $"{t.Seconds} second(s) ago.";
            }
            else
            {
                message = $"<1 second ago.";
            }

            <tr>
                <th scope="row">@(i+1)</th>
                <td><span data-toggle="tooltip" data-placement="right" title="@history[i].Timestamp">@(DateTime.Parse(history[i].Timestamp).ToShortDateString())</span></td>
                <td>@message</td>
                <td>@history[i].IPAddress</td>
            </tr>
        }
    </tbody>
</table>